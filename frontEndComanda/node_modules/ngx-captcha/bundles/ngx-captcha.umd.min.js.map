{"version":3,"sources":["ng://ngx-captcha/lib/components/base-recaptcha.component.ts","../../node_modules/tslib/tslib.es6.js","ng://ngx-captcha/lib/models/recaptcha-type.enum.ts","ng://ngx-captcha/lib/services/script.service.ts","ng://ngx-captcha/lib/components/invisible-recaptcha.component.ts","ng://ngx-captcha/lib/components/recaptcha-2.component.ts","ng://ngx-captcha/lib/services/recaptcha_v3.service.ts","ng://ngx-captcha/lib/ngx-captcha.module.ts"],"names":["BaseReCaptchaComponent","renderer","zone","injector","scriptService","this","captchaElemPrefix","type","tabIndex","success","EventEmitter","load","ready","setupAfterLoad","resetCaptchaAfterSuccess","isLoaded","prototype","ngAfterViewInit","control","get","NgControl","ngOnChanges","changes","hl","firstChange","currentValue","previousValue","cleanup","setupComponent","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","_this","run","onChange","undefined","onTouched","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","document","getElementById","Error","renderReCaptcha","runOutsideAngular","render","getCaptchaProperties","next","handleCallback","callback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","registerCaptchaScript","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","innerHTML","newElem","createElement","id","appendChild","writeValue","obj","registerOnChange","fn","registerOnTouched","Input","Output","ViewChild","args","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","InvisibleReCaptcha","ReCaptcha2","ScriptService","windowGrecaptcha","windowOnLoadCallbackProperty","onLoad","language","grecaptchaScriptLoaded","window","bind","scriptElem","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","getLanguageParam","Injectable","NgZone","InvisibleReCaptchaComponent","_super","call","size","badge","recaptchaType","ReCaptchaType","tslib_1.__extends","execute","sitekey","siteKey","response","tabindex","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","Injector","ReCaptcha2Component","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","theme","expire","error","ngOnDestroy","registerCallbacks","expired-callback","handleExpireCallback","error-callback","handleErrorCallback","ReCaptchaV3Service","action","then","token","NgxCaptchaModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n    AfterViewInit,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Injector,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\n\r\nexport abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit {\r\n\r\n    /**\r\n    * Prefix of the captcha element\r\n    */\r\n    protected readonly captchaElemPrefix = 'ngx_captcha_id_';\r\n\r\n    /**\r\n    * Google's site key.\r\n    * You can find this under https://www.google.com/recaptcha\r\n    */\r\n    @Input() siteKey: string;\r\n\r\n    /**\r\n    * Type\r\n    */\r\n    @Input() type: 'audio' | 'image' = 'image';\r\n\r\n    /**\r\n    * Language code. Auto-detects the user's language if unspecified.\r\n    */\r\n    @Input() hl: string;\r\n\r\n    /**\r\n    * Tab index\r\n    */\r\n    @Input() tabIndex = 0;\r\n\r\n    /**\r\n    * Called when captcha receives successful response.\r\n    * Captcha response token is passed to event.\r\n    */\r\n    @Output() success = new EventEmitter<string>();\r\n\r\n    /**\r\n    * Called when captcha is loaded. Event receives id of the captcha\r\n    */\r\n    @Output() load = new EventEmitter<number>();\r\n\r\n    /**\r\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n    */\r\n    @Output() ready = new EventEmitter<void>();\r\n\r\n    @ViewChild('captchaWrapperElem') captchaWrapperElem: ElementRef;\r\n    @ViewChild('captchaScriptElem') captchaScriptElem: ElementRef;\r\n\r\n    /**\r\n    * Indicates if captcha should be set on load\r\n    */\r\n    private setupAfterLoad = false;\r\n\r\n    /**\r\n    * Captcha element\r\n    */\r\n    protected captchaElem?: HTMLElement;\r\n\r\n    /**\r\n    * Id of the captcha elem\r\n    */\r\n    protected captchaId?: number;\r\n\r\n    /**\r\n    * Holds last response value\r\n    */\r\n    protected currentResponse?: string;\r\n\r\n    /**\r\n    * If enabled, captcha will reset after receiving success response. This is useful\r\n    * when invisible captcha need to be resolved multiple times on same page\r\n    */\r\n    protected resetCaptchaAfterSuccess = false;\r\n\r\n    /**\r\n    * Captcha type\r\n    */\r\n    protected abstract recaptchaType: ReCaptchaType;\r\n\r\n    /**\r\n    * Required by ControlValueAccessor\r\n    */\r\n    protected onChange: (value: string | undefined) => void;\r\n    protected onTouched: (value: string | undefined) => void;\r\n\r\n    /**\r\n    * Indicates if captcha is loaded\r\n    */\r\n    public isLoaded = false;\r\n\r\n    /**\r\n    * Reference to global reCaptcha API\r\n    */\r\n    public reCaptchaApi?: any;\r\n\r\n    /**\r\n    * Id of the DOM element wrapping captcha\r\n    */\r\n    public captchaElemId?: string;\r\n\r\n    /**\r\n    * Form Control to be enable usage in reactive forms\r\n    */\r\n    public control?: FormControl;\r\n\r\n    protected constructor(\r\n        protected renderer: Renderer2,\r\n        protected zone: NgZone,\r\n        protected injector: Injector,\r\n        protected scriptService: ScriptService,\r\n    ) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl).control;\r\n    }\r\n\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    protected abstract getCaptchaProperties(): any;\r\n\r\n    /**\r\n    * Used for captcha specific setup\r\n    */\r\n    protected abstract captchaSpecificSetup(): void;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        this.setupComponent();\r\n    }\r\n\r\n    /**\r\n    * Gets captcha response as per reCaptcha docs\r\n    */\r\n    getResponse(): string {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n\r\n    /**\r\n    * Gets Id of captcha widget\r\n    */\r\n    getCaptchaId(): number | undefined {\r\n        return this.captchaId;\r\n    }\r\n\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    resetCaptcha(): void {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Gets last submitted captcha response\r\n    */\r\n    getCurrentResponse(): string | undefined {\r\n        return this.currentResponse;\r\n    }\r\n\r\n    /**\r\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    reloadCaptcha(): void {\r\n        this.setupComponent();\r\n    }\r\n\r\n    protected ensureCaptchaElem(captchaElemId: string): void {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n\r\n    /**\r\n    * Responsible for instantiating captcha element\r\n    */\r\n    protected renderReCaptcha(): void {\r\n\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Called when captcha receives response\r\n    * @param callback Callback\r\n    */\r\n    protected handleCallback(callback: any): void {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n\r\n    private setupComponent(): void {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n\r\n        this.scriptService.registerCaptchaScript('explicit', (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    private onloadCallback(grecapcha: any): void {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n\r\n        // fire load event\r\n        this.load.next();\r\n\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    private generateNewElemId(): string {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n\r\n    private createAndSetCaptchaElem(): void {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    }\r\n\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    public writeValue(obj: any): void { }\r\n\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    public registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n    * At some point we might be interested whether the user has touched our component\r\n    */\r\n    public registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n}\r\n\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\ndeclare var document: any;\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\r\n    protected readonly windowGrecaptcha = 'grecaptcha';\r\n\r\n    /**\r\n    * Name of the global callback\r\n    */\r\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerCaptchaScript(render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run(() => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\r\n            onLoad.bind(this, window[this.windowGrecaptcha])\r\n        ));\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(): void {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    private grecaptchaScriptLoaded(): boolean {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    private getLanguageParam(hl?: string): string {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n\r\n        return `&hl=${hl}`;\r\n    }\r\n\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    private getCaptchaScriptUrl(render: string, language?: string): string {\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.google.com/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  Optional,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): void {\r\n    // execute captcha\r\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size\r\n    };\r\n  }\r\n}\r\n\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReCaptcha2Component),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  /**\r\n  * Expired callback\r\n  */\r\n  @Output() expire = new EventEmitter<void>();\r\n\r\n  /**\r\n  * Error callback\r\n  */\r\n  @Output() error = new EventEmitter<void>();\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService,\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    window[this.windowOnErrorCallbackProperty] = {};\r\n    window[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    window[this.windowOnErrorCallbackProperty] = this.handleErrorCallback.bind(this);\r\n    window[this.windowOnExpireCallbackProperty] = this.handleExpireCallback.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Handles error callback\r\n  */\r\n  private handleErrorCallback(): void {\r\n    this.zone.run(() => {\r\n      this.onChange(undefined);\r\n      this.onTouched(undefined);\r\n    });\r\n\r\n    this.error.next();\r\n  }\r\n\r\n  /**\r\n   * Handles expired callback\r\n   */\r\n  private handleExpireCallback(): void {\r\n    this.expire.next();\r\n\r\n    // reset captcha on expire callback\r\n    this.resetCaptcha();\r\n  }\r\n}\r\n\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class ReCaptchaV3Service {\r\n\r\n    constructor(\r\n        protected scriptService: ScriptService,\r\n        protected zone: NgZone\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     */\r\n    execute(siteKey: string, action: string, callback: (token: string) => void): void {\r\n        this.scriptService.registerCaptchaScript(siteKey, (grecaptcha) => {\r\n            this.zone.runOutsideAngular(() => {\r\n                grecaptcha.execute(siteKey, {\r\n                    action: action\r\n                }).then((token) => {\r\n                    this.zone.run(() => callback(token));\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\nimport { ScriptService } from './services/script.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ],\n  providers: [\n    ScriptService,\n    ReCaptchaV3Service\n  ],\n  exports: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ]\n})\nexport class NgxCaptchaModule {\n}\n\n\n"]}