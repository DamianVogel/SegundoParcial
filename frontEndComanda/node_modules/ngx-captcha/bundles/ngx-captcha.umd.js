(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-captcha', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ngx-captcha'] = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,core,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var BaseReCaptchaComponent = /** @class */ (function () {
        function BaseReCaptchaComponent(renderer, zone, injector, scriptService) {
            this.renderer = renderer;
            this.zone = zone;
            this.injector = injector;
            this.scriptService = scriptService;
            /**
             * Prefix of the captcha element
             */
            this.captchaElemPrefix = 'ngx_captcha_id_';
            /**
             * Type
             */
            this.type = 'image';
            /**
             * Tab index
             */
            this.tabIndex = 0;
            /**
             * Called when captcha receives successful response.
             * Captcha response token is passed to event.
             */
            this.success = new core.EventEmitter();
            /**
             * Called when captcha is loaded. Event receives id of the captcha
             */
            this.load = new core.EventEmitter();
            /**
             * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.
             */
            this.ready = new core.EventEmitter();
            /**
             * Indicates if captcha should be set on load
             */
            this.setupAfterLoad = false;
            /**
             * If enabled, captcha will reset after receiving success response. This is useful
             * when invisible captcha need to be resolved multiple times on same page
             */
            this.resetCaptchaAfterSuccess = false;
            /**
             * Indicates if captcha is loaded
             */
            this.isLoaded = false;
        }
        /**
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.control = this.injector.get(forms.NgControl).control;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // cleanup scripts if language changed because they need to be reloaded
                if (changes && changes.hl) {
                    if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {
                        this.scriptService.cleanup();
                    }
                }
                this.setupComponent();
            };
        /**
        * Gets captcha response as per reCaptcha docs
        */
        /**
         * Gets captcha response as per reCaptcha docs
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.getResponse = /**
         * Gets captcha response as per reCaptcha docs
         * @return {?}
         */
            function () {
                return this.reCaptchaApi.getResponse(this.captchaId);
            };
        /**
        * Gets Id of captcha widget
        */
        /**
         * Gets Id of captcha widget
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.getCaptchaId = /**
         * Gets Id of captcha widget
         * @return {?}
         */
            function () {
                return this.captchaId;
            };
        /**
        * Resets captcha
        */
        /**
         * Resets captcha
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.resetCaptcha = /**
         * Resets captcha
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.run(function () {
                    _this.onChange(undefined);
                    _this.onTouched(undefined);
                });
            };
        /**
        * Gets last submitted captcha response
        */
        /**
         * Gets last submitted captcha response
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.getCurrentResponse = /**
         * Gets last submitted captcha response
         * @return {?}
         */
            function () {
                return this.currentResponse;
            };
        /**
        * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them
        */
        /**
         * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.reloadCaptcha = /**
         * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them
         * @return {?}
         */
            function () {
                this.setupComponent();
            };
        /**
         * @param {?} captchaElemId
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.ensureCaptchaElem = /**
         * @param {?} captchaElemId
         * @return {?}
         */
            function (captchaElemId) {
                /** @type {?} */
                var captchaElem = document.getElementById(captchaElemId);
                if (!captchaElem) {
                    throw Error("Captcha element with id '" + captchaElemId + "' was not found");
                }
                // assign captcha alem
                this.captchaElem = captchaElem;
            };
        /**
        * Responsible for instantiating captcha element
        */
        /**
         * Responsible for instantiating captcha element
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.renderReCaptcha = /**
         * Responsible for instantiating captcha element
         * @return {?}
         */
            function () {
                var _this = this;
                // run outside angular zone due to timeout issues when testing
                // details: https://github.com/Enngage/ngx-captcha/issues/26
                this.zone.runOutsideAngular(function () {
                    _this.captchaId = _this.reCaptchaApi.render(_this.captchaElemId, _this.getCaptchaProperties());
                    _this.ready.next();
                });
            };
        /**
        * Called when captcha receives response
        * @param callback Callback
        */
        /**
         * Called when captcha receives response
         * @param {?} callback Callback
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.handleCallback = /**
         * Called when captcha receives response
         * @param {?} callback Callback
         * @return {?}
         */
            function (callback) {
                var _this = this;
                this.currentResponse = callback;
                this.success.next(callback);
                this.zone.run(function () {
                    _this.onChange(callback);
                    _this.onTouched(callback);
                });
                if (this.resetCaptchaAfterSuccess) {
                    this.resetCaptcha();
                }
            };
        /**
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.getPseudoUniqueNumber = /**
         * @return {?}
         */
            function () {
                return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);
            };
        /**
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.setupComponent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // captcha specific setup
                this.captchaSpecificSetup();
                // create captcha wrapper
                this.createAndSetCaptchaElem();
                this.scriptService.registerCaptchaScript('explicit', function (grecaptcha) {
                    _this.onloadCallback(grecaptcha);
                }, this.hl);
            };
        /**
        * Called when google's recaptcha script is ready
        */
        /**
         * Called when google's recaptcha script is ready
         * @param {?} grecapcha
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.onloadCallback = /**
         * Called when google's recaptcha script is ready
         * @param {?} grecapcha
         * @return {?}
         */
            function (grecapcha) {
                // assign reference to reCaptcha Api once its loaded
                this.reCaptchaApi = grecapcha;
                if (!this.reCaptchaApi) {
                    throw Error("ReCaptcha Api was not initialized correctly");
                }
                // loaded flag
                this.isLoaded = true;
                // fire load event
                this.load.next();
                // render captcha
                this.renderReCaptcha();
                // setup component if it was flagged as such
                if (this.setupAfterLoad) {
                    this.setupAfterLoad = false;
                    this.setupComponent();
                }
            };
        /**
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.generateNewElemId = /**
         * @return {?}
         */
            function () {
                return this.captchaElemPrefix + this.getPseudoUniqueNumber();
            };
        /**
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.createAndSetCaptchaElem = /**
         * @return {?}
         */
            function () {
                // generate new captcha id
                this.captchaElemId = this.generateNewElemId();
                if (!this.captchaElemId) {
                    throw Error("Captcha elem Id is not set");
                }
                // remove old html
                this.captchaWrapperElem.nativeElement.innerHTML = '';
                // create new wrapper for captcha
                /** @type {?} */
                var newElem = this.renderer.createElement('div');
                newElem.id = this.captchaElemId;
                this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);
                // update captcha elem
                this.ensureCaptchaElem(this.captchaElemId);
            };
        /**
         * To be aligned with the ControlValueAccessor interface we need to implement this method
         * However as we don't want to update the recaptcha, this doesn't need to be implemented
         */
        /**
         * To be aligned with the ControlValueAccessor interface we need to implement this method
         * However as we don't want to update the recaptcha, this doesn't need to be implemented
         * @param {?} obj
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.writeValue = /**
         * To be aligned with the ControlValueAccessor interface we need to implement this method
         * However as we don't want to update the recaptcha, this doesn't need to be implemented
         * @param {?} obj
         * @return {?}
         */
            function (obj) { };
        /**
         * This method helps us tie together recaptcha and our formControl values
         */
        /**
         * This method helps us tie together recaptcha and our formControl values
         * @param {?} fn
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.registerOnChange = /**
         * This method helps us tie together recaptcha and our formControl values
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
        * At some point we might be interested whether the user has touched our component
        */
        /**
         * At some point we might be interested whether the user has touched our component
         * @param {?} fn
         * @return {?}
         */
        BaseReCaptchaComponent.prototype.registerOnTouched = /**
         * At some point we might be interested whether the user has touched our component
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        BaseReCaptchaComponent.propDecorators = {
            siteKey: [{ type: core.Input }],
            type: [{ type: core.Input }],
            hl: [{ type: core.Input }],
            tabIndex: [{ type: core.Input }],
            success: [{ type: core.Output }],
            load: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            captchaWrapperElem: [{ type: core.ViewChild, args: ['captchaWrapperElem',] }],
            captchaScriptElem: [{ type: core.ViewChild, args: ['captchaScriptElem',] }]
        };
        return BaseReCaptchaComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ReCaptchaType = {
        InvisibleReCaptcha: 0,
        ReCaptcha2: 1,
    };
    ReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';
    ReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ScriptService = /** @class */ (function () {
        function ScriptService(zone) {
            this.zone = zone;
            /**
             * Name of the global google recaptcha script
             */
            this.windowGrecaptcha = 'grecaptcha';
            /**
             * Name of the global callback
             */
            this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';
        }
        /**
         * @param {?} render
         * @param {?} onLoad
         * @param {?=} language
         * @return {?}
         */
        ScriptService.prototype.registerCaptchaScript = /**
         * @param {?} render
         * @param {?} onLoad
         * @param {?=} language
         * @return {?}
         */
            function (render, onLoad, language) {
                var _this = this;
                if (this.grecaptchaScriptLoaded()) {
                    // recaptcha script is already loaded
                    // just call the callback
                    this.zone.run(function () {
                        onLoad(window[_this.windowGrecaptcha]);
                    });
                    return;
                }
                // we need to patch the callback through global variable, otherwise callback is not accessible
                // note: https://github.com/Enngage/ngx-captcha/issues/2
                window[this.windowOnLoadCallbackProperty] = ( /** @type {?} */((function () { return _this.zone.run(onLoad.bind(_this, window[_this.windowGrecaptcha])); })));
                // prepare script elem
                /** @type {?} */
                var scriptElem = document.createElement('script');
                scriptElem.innerHTML = '';
                scriptElem.src = this.getCaptchaScriptUrl(render, language);
                scriptElem.async = true;
                scriptElem.defer = true;
                // add script to header
                document.getElementsByTagName('head')[0].appendChild(scriptElem);
            };
        /**
         * @return {?}
         */
        ScriptService.prototype.cleanup = /**
         * @return {?}
         */
            function () {
                window[this.windowOnLoadCallbackProperty] = undefined;
                window[this.windowGrecaptcha] = undefined;
            };
        /**
         * Indicates if google recaptcha script is available and ready to be used
         */
        /**
         * Indicates if google recaptcha script is available and ready to be used
         * @return {?}
         */
        ScriptService.prototype.grecaptchaScriptLoaded = /**
         * Indicates if google recaptcha script is available and ready to be used
         * @return {?}
         */
            function () {
                if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {
                    return true;
                }
                return false;
            };
        /**
         * Gets language param used in script url
         */
        /**
         * Gets language param used in script url
         * @param {?=} hl
         * @return {?}
         */
        ScriptService.prototype.getLanguageParam = /**
         * Gets language param used in script url
         * @param {?=} hl
         * @return {?}
         */
            function (hl) {
                if (!hl) {
                    return '';
                }
                return "&hl=" + hl;
            };
        /**
        * Url to google api script
        */
        /**
         * Url to google api script
         * @param {?} render
         * @param {?=} language
         * @return {?}
         */
        ScriptService.prototype.getCaptchaScriptUrl = /**
         * Url to google api script
         * @param {?} render
         * @param {?=} language
         * @return {?}
         */
            function (render, language) {
                // tslint:disable-next-line:max-line-length
                return "https://www.google.com/recaptcha/api.js?onload=" + this.windowOnLoadCallbackProperty + "&render=" + render + this.getLanguageParam(language);
            };
        ScriptService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ScriptService.ctorParameters = function () {
            return [
                { type: core.NgZone }
            ];
        };
        return ScriptService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var InvisibleReCaptchaComponent = /** @class */ (function (_super) {
        __extends(InvisibleReCaptchaComponent, _super);
        function InvisibleReCaptchaComponent(renderer, zone, injector, scriptService) {
            var _this = _super.call(this, renderer, zone, injector, scriptService) || this;
            _this.renderer = renderer;
            _this.zone = zone;
            _this.injector = injector;
            _this.scriptService = scriptService;
            /**
             * This size representing invisible captcha
             */
            _this.size = 'invisible';
            /**
             * Badge
             */
            _this.badge = 'bottomright';
            _this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        InvisibleReCaptchaComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
            };
        /**
         * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
         */
        /**
         * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
         * @return {?}
         */
        InvisibleReCaptchaComponent.prototype.execute = /**
         * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
         * @return {?}
         */
            function () {
                var _this = this;
                // execute captcha
                this.zone.runOutsideAngular(function () { return _this.reCaptchaApi.execute(_this.captchaId); });
            };
        /**
         * @return {?}
         */
        InvisibleReCaptchaComponent.prototype.captchaSpecificSetup = /**
         * @return {?}
         */
            function () {
            };
        /**
        * Gets reCaptcha properties
        */
        /**
         * Gets reCaptcha properties
         * @return {?}
         */
        InvisibleReCaptchaComponent.prototype.getCaptchaProperties = /**
         * Gets reCaptcha properties
         * @return {?}
         */
            function () {
                var _this = this;
                return {
                    'sitekey': this.siteKey,
                    'callback': function (response) { return _this.zone.run(function () { return _this.handleCallback(response); }); },
                    'badge': this.badge,
                    'type': this.type,
                    'tabindex': this.tabIndex,
                    'size': this.size
                };
            };
        InvisibleReCaptchaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-invisible-recaptcha',
                        template: "\n  <div #captchaWrapperElem></div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return InvisibleReCaptchaComponent; }),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        InvisibleReCaptchaComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.NgZone },
                { type: core.Injector },
                { type: ScriptService }
            ];
        };
        InvisibleReCaptchaComponent.propDecorators = {
            badge: [{ type: core.Input }],
            hl: [{ type: core.Input }]
        };
        return InvisibleReCaptchaComponent;
    }(BaseReCaptchaComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ReCaptcha2Component = /** @class */ (function (_super) {
        __extends(ReCaptcha2Component, _super);
        function ReCaptcha2Component(renderer, zone, injector, scriptService) {
            var _this = _super.call(this, renderer, zone, injector, scriptService) || this;
            _this.renderer = renderer;
            _this.zone = zone;
            _this.injector = injector;
            _this.scriptService = scriptService;
            /**
             * Name of the global expire callback
             */
            _this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';
            /**
             * Name of the global error callback
             */
            _this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';
            /**
             * Theme
             */
            _this.theme = 'light';
            /**
             * Size
             */
            _this.size = 'normal';
            /**
             * Expired callback
             */
            _this.expire = new core.EventEmitter();
            /**
             * Error callback
             */
            _this.error = new core.EventEmitter();
            _this.recaptchaType = ReCaptchaType.ReCaptcha2;
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ReCaptcha2Component.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                _super.prototype.ngOnChanges.call(this, changes);
            };
        /**
         * @return {?}
         */
        ReCaptcha2Component.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                window[this.windowOnErrorCallbackProperty] = {};
                window[this.windowOnExpireCallbackProperty] = {};
            };
        /**
         * @return {?}
         */
        ReCaptcha2Component.prototype.captchaSpecificSetup = /**
         * @return {?}
         */
            function () {
                this.registerCallbacks();
            };
        /**
         * Gets reCaptcha properties
        */
        /**
         * Gets reCaptcha properties
         * @return {?}
         */
        ReCaptcha2Component.prototype.getCaptchaProperties = /**
         * Gets reCaptcha properties
         * @return {?}
         */
            function () {
                var _this = this;
                return {
                    'sitekey': this.siteKey,
                    'callback': function (response) { return _this.zone.run(function () { return _this.handleCallback(response); }); },
                    'expired-callback': function () { return _this.zone.run(function () { return _this.handleExpireCallback(); }); },
                    'error-callback': function () { return _this.zone.run(function () { return _this.handleErrorCallback(); }); },
                    'theme': this.theme,
                    'type': this.type,
                    'size': this.size,
                    'tabindex': this.tabIndex
                };
            };
        /**
         * Registers global callbacks
        */
        /**
         * Registers global callbacks
         * @return {?}
         */
        ReCaptcha2Component.prototype.registerCallbacks = /**
         * Registers global callbacks
         * @return {?}
         */
            function () {
                window[this.windowOnErrorCallbackProperty] = this.handleErrorCallback.bind(this);
                window[this.windowOnExpireCallbackProperty] = this.handleExpireCallback.bind(this);
            };
        /**
         * Handles error callback
        */
        /**
         * Handles error callback
         * @return {?}
         */
        ReCaptcha2Component.prototype.handleErrorCallback = /**
         * Handles error callback
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.run(function () {
                    _this.onChange(undefined);
                    _this.onTouched(undefined);
                });
                this.error.next();
            };
        /**
         * Handles expired callback
         */
        /**
         * Handles expired callback
         * @return {?}
         */
        ReCaptcha2Component.prototype.handleExpireCallback = /**
         * Handles expired callback
         * @return {?}
         */
            function () {
                this.expire.next();
                // reset captcha on expire callback
                this.resetCaptcha();
            };
        ReCaptcha2Component.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-recaptcha2',
                        template: "\n  <div #captchaWrapperElem></div>",
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return ReCaptcha2Component; }),
                                multi: true,
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ReCaptcha2Component.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.NgZone },
                { type: core.Injector },
                { type: ScriptService }
            ];
        };
        ReCaptcha2Component.propDecorators = {
            theme: [{ type: core.Input }],
            size: [{ type: core.Input }],
            hl: [{ type: core.Input }],
            expire: [{ type: core.Output }],
            error: [{ type: core.Output }]
        };
        return ReCaptcha2Component;
    }(BaseReCaptchaComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ReCaptchaV3Service = /** @class */ (function () {
        function ReCaptchaV3Service(scriptService, zone) {
            this.scriptService = scriptService;
            this.zone = zone;
        }
        /**
         * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
         * this callback in your backend to get meaningful results.
         *
         * For more information see https://developers.google.com/recaptcha/docs/v3
         *
         * @param siteKey Site key found in your google admin panel
         * @param action Action to log
         */
        /**
         * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
         * this callback in your backend to get meaningful results.
         *
         * For more information see https://developers.google.com/recaptcha/docs/v3
         *
         * @param {?} siteKey Site key found in your google admin panel
         * @param {?} action Action to log
         * @param {?} callback
         * @return {?}
         */
        ReCaptchaV3Service.prototype.execute = /**
         * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
         * this callback in your backend to get meaningful results.
         *
         * For more information see https://developers.google.com/recaptcha/docs/v3
         *
         * @param {?} siteKey Site key found in your google admin panel
         * @param {?} action Action to log
         * @param {?} callback
         * @return {?}
         */
            function (siteKey, action, callback) {
                var _this = this;
                this.scriptService.registerCaptchaScript(siteKey, function (grecaptcha) {
                    _this.zone.runOutsideAngular(function () {
                        grecaptcha.execute(siteKey, {
                            action: action
                        }).then(function (token) {
                            _this.zone.run(function () { return callback(token); });
                        });
                    });
                });
            };
        ReCaptchaV3Service.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ReCaptchaV3Service.ctorParameters = function () {
            return [
                { type: ScriptService },
                { type: core.NgZone }
            ];
        };
        return ReCaptchaV3Service;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxCaptchaModule = /** @class */ (function () {
        function NgxCaptchaModule() {
        }
        NgxCaptchaModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            ReCaptcha2Component,
                            InvisibleReCaptchaComponent
                        ],
                        providers: [
                            ScriptService,
                            ReCaptchaV3Service
                        ],
                        exports: [
                            ReCaptcha2Component,
                            InvisibleReCaptchaComponent
                        ]
                    },] }
        ];
        return NgxCaptchaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.BaseReCaptchaComponent = BaseReCaptchaComponent;
    exports.InvisibleReCaptchaComponent = InvisibleReCaptchaComponent;
    exports.ReCaptcha2Component = ReCaptcha2Component;
    exports.ReCaptchaType = ReCaptchaType;
    exports.ScriptService = ScriptService;
    exports.ReCaptchaV3Service = ReCaptchaV3Service;
    exports.NgxCaptchaModule = NgxCaptchaModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,