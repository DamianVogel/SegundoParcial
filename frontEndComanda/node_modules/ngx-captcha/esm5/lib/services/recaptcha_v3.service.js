/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ScriptService } from './script.service';
var ReCaptchaV3Service = /** @class */ (function () {
    function ReCaptchaV3Service(scriptService, zone) {
        this.scriptService = scriptService;
        this.zone = zone;
    }
    /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param siteKey Site key found in your google admin panel
     * @param action Action to log
     */
    /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?} callback
     * @return {?}
     */
    ReCaptchaV3Service.prototype.execute = /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?} callback
     * @return {?}
     */
    function (siteKey, action, callback) {
        var _this = this;
        this.scriptService.registerCaptchaScript(siteKey, function (grecaptcha) {
            _this.zone.runOutsideAngular(function () {
                grecaptcha.execute(siteKey, {
                    action: action
                }).then(function (token) {
                    _this.zone.run(function () { return callback(token); });
                });
            });
        });
    };
    ReCaptchaV3Service.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ReCaptchaV3Service.ctorParameters = function () { return [
        { type: ScriptService },
        { type: NgZone }
    ]; };
    return ReCaptchaV3Service;
}());
export { ReCaptchaV3Service };
if (false) {
    /** @type {?} */
    ReCaptchaV3Service.prototype.scriptService;
    /** @type {?} */
    ReCaptchaV3Service.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhX3YzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY2FwdGNoYS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9yZWNhcHRjaGFfdjMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpEO0lBR0ksNEJBQ2MsYUFBNEIsRUFDNUIsSUFBWTtRQURaLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLFNBQUksR0FBSixJQUFJLENBQVE7SUFFMUIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHOzs7Ozs7Ozs7Ozs7SUFDSCxvQ0FBTzs7Ozs7Ozs7Ozs7SUFBUCxVQUFRLE9BQWUsRUFBRSxNQUFjLEVBQUUsUUFBaUM7UUFBMUUsaUJBVUM7UUFURyxJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxVQUFDLFVBQVU7WUFDekQsS0FBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztnQkFDeEIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7b0JBQ3hCLE1BQU0sRUFBRSxNQUFNO2lCQUNqQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBSztvQkFDVixLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFmLENBQWUsQ0FBQyxDQUFDO2dCQUN6QyxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztnQkE1QkosVUFBVTs7OztnQkFGRixhQUFhO2dCQUZELE1BQU07O0lBaUMzQix5QkFBQztDQUFBLEFBN0JELElBNkJDO1NBNUJZLGtCQUFrQjs7O0lBR3ZCLDJDQUFzQzs7SUFDdEMsa0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBTY3JpcHRTZXJ2aWNlIH0gZnJvbSAnLi9zY3JpcHQuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZUNhcHRjaGFWM1NlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByb3RlY3RlZCBzY3JpcHRTZXJ2aWNlOiBTY3JpcHRTZXJ2aWNlLFxyXG4gICAgICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmVcclxuICAgICkge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZXMgcmVDYXB0Y2hhIHYzIHdpdGggZ2l2ZW4gYWN0aW9uIGFuZCBwYXNzZXMgdG9rZW4gdmlhIGNhbGxiYWNrLiBZb3UgbmVlZCB0byB2ZXJpZnlcclxuICAgICAqIHRoaXMgY2FsbGJhY2sgaW4geW91ciBiYWNrZW5kIHRvIGdldCBtZWFuaW5nZnVsIHJlc3VsdHMuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3JlY2FwdGNoYS9kb2NzL3YzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNpdGVLZXkgU2l0ZSBrZXkgZm91bmQgaW4geW91ciBnb29nbGUgYWRtaW4gcGFuZWxcclxuICAgICAqIEBwYXJhbSBhY3Rpb24gQWN0aW9uIHRvIGxvZ1xyXG4gICAgICovXHJcbiAgICBleGVjdXRlKHNpdGVLZXk6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGNhbGxiYWNrOiAodG9rZW46IHN0cmluZykgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2NyaXB0U2VydmljZS5yZWdpc3RlckNhcHRjaGFTY3JpcHQoc2l0ZUtleSwgKGdyZWNhcHRjaGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGdyZWNhcHRjaGEuZXhlY3V0ZShzaXRlS2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiBjYWxsYmFjayh0b2tlbikpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==